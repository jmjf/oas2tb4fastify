openapi: 3.1.0
info:
  title: Test API
  description: Testing complex query parameters
  version: 0.0.1
  license:
    name: MIT
    url: https://nobody.org
servers:
  - url: http://127.0.0.0:3000
tags:
  - name: Users
    description: Operations for users
  - name: Other
    description: other stuff
paths:
  /testDateResponseHeader:
    get:
      operationId: testDateResponseHeader
      description: test date-formatted string response header (TB generation)
      security: []
      responses:
        "200":
          description: test date header
          headers:
            X-Test-Date-Header:
              $ref: '#/components/headers/XDateHeader'
            X-Test-Inline-Date-Header:
              schema:
                type: string
                format: time
  /testInlineMultiMediaRequestBodyAndMultiMediaRefResponse:
    post:
      operationId: testInlineMultiMediaRequestBodyAndMultiMediaRefResponse
      security: []
      summary: responses inline 4xx and ref 200, request body inline array schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: allOf covers genEntriesCode else branch and genValuesCode isArray object branch
              allOf:
                - $ref: '#/components/schemas/PostBody'
          application/xml:
            schema:
              description: covers case where we have an array of objects that are consts
              anyOf:
                - const: 'array of const 1'
                - const: 'array of const 2'
      responses:
        "200":
          $ref: '#/components/responses/TestMultiMediaResponse'
        "4xx":
          description: error
          content:
            application/json:
              schema:
                description: error response
                type: object
                properties:
                  errorCd:
                    type: number
                  errorMessageTx:
                    type: string
  /testInlineRequestBodyRefToResponses:
    put:
      operationId: testInlineRequestBodyRefToResponses
      security: []
      summary: fully inline request body, response ref
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: allOf covers genEntriesCode tests genEntriesCode type object default branch
              type: object
              properties:
                prop1:
                  type: string
              default:
                prop1: 'test genEntriesCode type object default branch'
      responses:
        "200":
          $ref: '#/components/responses/GetUsersByQuery200Response'
        "4xx":
          description: error
  /testInlineResponseWithRefToSchema:
    get:
      operationId: testInlineResponseWithRefToSchema
      tags:
        - Users
      security: []
      summary: scalar query parameter and response with partial inline and schema ref
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        "200":
          description: result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "4xx":
          description: error
  /testINVALID_ParamErrors/{authorization}:
    get:
      operationId: testINVALID_ParamErrors
      security: []
      summary: test parameter error cases
      parameters:
        - $ref: '#/components/parameters/TestNoSchemaQuery'
        - $ref: '#/components/parameters/TestInvalidAcceptParam'
        - $ref: '#/components/parameters/TestInvalidContentTypeParam'
        - $ref: '#/components/parameters/TestInvalidAuthorizationParam'
        - $ref: '#/components/parameters/TestArrayPathParam'
        - $ref: '#/components/parameters/TestObjectPathParam'
        - $ref: '#/components/parameters/TestNoPropsObjectPathParam'
        - $ref: '#/components/parameters/TestObjPropObjectPathParam'
      responses:
        "200":
          $ref: '#/components/responses/GetUsersByQuery200Response'
        "4xx":
          description: error          
  /testINVALID_PathParamAndCompleteResponse/{postId}:
    get:
      operationId: testINVALID_PathParamAndCompleteResponse
      tags:
        - Posts
      security: []
      summary: path parameter and a refed response
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        # invalid OpenAPI because components.responses should not contain response codes
        $ref: '#/components/responses/TestCompleteResponse'  
  /testPathLevelParams:
    $ref: 'pathItem.yaml'   
  /testRefParametersQueryAndHeader:
    get:
      operationId: testRefParametersQueryAndHeader
      tags:
        - Users
        - Other
      security: []
      summary: query parameter and header parameter, "4xx" response included
      parameters:
        - $ref: '#/components/parameters/UserQuery'
        - $ref: '#/components/parameters/XTestHeaderParam'
      responses:
        "200":
          $ref: '#/components/responses/GetUsersByQuery200Response'
        "4xx":
          description: error
  /testRefParametersWithInlineParameter:
    get:
      operationId: testRefParametersWithInlineParameter
      tags:
        - Posts
      security: []
      summary: two scalar ref parameters and an inline array parameter
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationLimit'
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          $ref: '#/components/responses/GetPostsByQuery200Response'
        "4xx":
          description: error
  /testRefQueryParameterMultiObject:
    get:
      operationId: testRefQueryParameterMultiObject
      description: test a case where a query combines two objects
      tags:
        - Test
      security: []
      parameters:
        - $ref: '#/components/parameters/UserQuery'
        - $ref: '#/components/parameters/TestObjectRefQuery'
      responses:
        "200":
          $ref: '#/components/responses/GetUsersByQuery200Response'
        '"4xx"':
            description: error     
  /testRequestBodyRef:
    post:
      operationId: testRequestBodyRef
      tags:
        - Posts
      security: []
      summary: request body ref and response with partial inline and schema ref
      requestBody:
        $ref: '#/components/requestBodies/PostRequestBody'
      responses:
        "200":
          description: result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "4xx":
          description: error
components:
  pathItems:
    testPathItem:

  schemas:
    UserId:
      type: number
      description: uniquely identifes a user
      minimum: 1
    UserNm:
      type: string
      minLength: 3
      description: User name must be at least 3 characters
      example: Joe
    EmailAddrTx:
      type: string
      format: email
      description: An email address
      example: joe@mailinator.com
    x-dashes:
      title: x_dashes
      type: string
    $100ok:
      title: $100ok
      type: string
    xíêó:
      title: cuneiform
      type: number
    TestBoolean:
      description: test boolean property
      type: boolean
    User:
      title: User
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/UserId'
          description: A unique identifier for a user (override)
        userNm:
          $ref: '#/components/schemas/UserNm'
        emailAddrTx:
          $ref: '#/components/schemas/EmailAddrTx'
        x-dashes:
          $ref: '#/components/schemas/x-dashes'
        $100ok:
          $ref: '#/components/schemas/$100ok'
        xíêó:
          $ref: '#/components/schemas/xíêó'
        testBoolean:
          $ref: '#/components/schemas/TestBoolean'
        testUnionType:
          type:
            - string
            - number
            - 'null'
            - object
            - array
      required:
        - userId
        - userNm
    PostId:
      type: number
      description: uniquely identifes a post
      minimum: 1
    TitleTx:
      type: string
      description: The title of a blog post
      default: none
      minLength: 3
      maxLength: 100
    PostTx:
      type: string
      minLength: 1
      maxLength: 1024
      description: Contents of a post
    PostStatus:
      type: string
      # enum covers genValuesCode isArray string case
      enum:
        - draft
        - published
        - deleted
      description: |
        Post status:
         - draft - work in progress
         - published - for the world to see
         - deleted - don't show this to anyone
    GenericTs:
      type: string
      description: Description not provided
      format: date-time
      example: 2024-01-02:03:04:05Z
    Post:
      title: Post
      type: object
      properties:
        postId:
          $ref: '#/components/schemas/PostId'
          description: Uniquely identifies a blog post
        titleTx:
          $ref: '#/components/schemas/TitleTx'
          default: hello
        postTx:
          $ref: '#/components/schemas/PostTx'
        statusCd:
          $ref: '#/components/schemas/PostStatus'
          default: draft
        statusTs:
          $ref: '#/components/schemas/GenericTs'
          description: The date and time when the post was put in the current status
          example: '2025-11-12T13:14:15Z'
        testNot:
          not:
            type: string
        testOneOf:
          oneOf:
            - $ref: '#/components/schemas/PostStatus'
            - $ref: '#/components/schemas/TitleTx'
        testAllOf:
          allOf:
            - $ref: '#/components/schemas/PostStatus'
            - $ref: '#/components/schemas/TitleTx'
        testAnyOf:
          anyOf:
            - $ref: '#/components/schemas/PostStatus'
            - $ref: '#/components/schemas/TitleTx'
        testConstString:
          const: 'abc'
        testConstNumber:
          const: 123
        testConstArray:
          # the type of the first const determines all, this is probably not valid OpenAPI
          const:
            - 'abc'
            - 123
        testArrayItems:
          # this isn't valid OpenAPI, but code considers it, so including for coverage
          type: array
          items:
            - type: string
            - type: integer
      additionalProperties: false
      required:
        - postId
        - titleTx
        - postTx
        - postStatus
    PostBody:
      title: PostBody
      type: object
      properties:
        titleTx:
          $ref: '#/components/schemas/TitleTx'
          default: hello
        postTx:
          $ref: '#/components/schemas/PostTx'
        author:
          $ref: '#/components/schemas/User'
          default: joe
        statusCd:
          $ref: '#/components/schemas/PostStatus'
          default: draft
        statusTs:
          $ref: '#/components/schemas/GenericTs'
          description: The date and time when the post was put in the current status
          example: '2025-11-12T13:14:15Z'
      additionalProperties: false
      required:
        - titleTx
        - postTx
        - postStatus
    ObjectSchemaForRef:
      type: object
      required:
        - postId
      properties:
        postId:
          $ref: '#/components/schemas/PostId'
        postedTs:
          $ref: '#/components/schemas/GenericTs'
  parameters:
    PostIdParam:
      in: path
      name: postId
      # required: true covers genParamRequiredCode if required branch
      required: true
      schema:
        type: object
        properties:
          postId:
            $ref: '#/components/schemas/PostId'
            description: A unique identifier for a post from parameters
        required:
          - postId
    PaginationPage:
      name: page
      in: query
      description: Page number to retrieve.
      required: true
      schema:
        type: integer
        default: 1
        example: 2
    PaginationLimit:
      name: limit
      in: query
      description: Number of items per page.
      schema:
        type: integer
        default: 10
        maximum: 30
        example: 15
    UserIdParam:
      in: path
      name: userId
      schema:
        title: UserIdParam
        type: object
        properties:
          userId:
            $ref: '#/components/schemas/UserId'
            description: A unique identifier for a user
        required:
          - userId
    UserQuery:
      in: query
      name: userQuery
      description: this description can be preserved in querystring
      style: simple
      allowReserved: true
      schema:
        title: UserQuery
        type: object
        description: this description will not be preserved
        required:
          - userId
          - userNm
        properties:
          userId:
            $ref: '#/components/schemas/UserId'
          userNm:
            $ref: '#/components/schemas/UserNm'
          inline:
            type: string
            minLength: 1
            description: an inline property
    XTestHeaderParam:
      in: header
      name: x-test-header
      description: test header in request
      schema:
        type: string
    TestArrayPathParam:
      in: path
      description: covers hoistSchemas type array branch
      name: arrayParam
      schema:
        type: array
        items: 
          type: string
    TestObjectPathParam:
      in: path
      description: covers hoistSchemas type object branch props.length > 1
      name: objectParam
      schema:
        type: object
        properties:
          prop1:
            type: string
          prop2:
            type: number
    TestNoPropsObjectPathParam:
      in: path
      description: covers hoistSchemas type object branch props.length === 0
      name: noPropsObjectParam
      schema:
        type: object
    TestObjPropObjectPathParam:
      in: path
      description: covers hoistSchemas type object branch object prop case
      name: objectParam
      schema:
        type: object
        properties:
          prop1:
            type: array
            items: 
              type: string
    TestNoSchemaQuery:
      in: query
      name: noSchemaQuery
      description: no schema query
    TestInvalidAcceptParam:
      in: header
      name: Accept
      description: invalid param accept
      schema:
        type: number
    TestInvalidContentTypeParam:
      in: header
      name: Content-Type
      description: invalid param content-type
      schema:
        type: number
    TestInvalidAuthorizationParam:
      in: path
      name: Authorization
      description: invalid param authorization
      schema:
        type: number
    TestObjectRefQuery:
      in: query
      name: objectRefTest
      description: schema refs an object
      schema:
        $ref: '#/components/schemas/ObjectSchemaForRef'
  responses:
    HTTP404NotFound:
      description: The specified resource was not found
    HTTP500InternalServerError:
      description: Something went terribly wrong
    GetUsersByQuery200Response:
      description: result
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: '#/components/schemas/User'
      headers:
        x-test-header:     # this is the name used in the response
          $ref: '#/components/headers/XTestHeader'
    GetPostsByQuery200Response:
      description: result
      content:
        application/json:
          schema:
            title: GetPostsByQuery200Response
            type: array
            items:
              $ref: '#/components/schemas/Post'
    TestCompleteResponse:
      description: test a response definition with response codes
      "200":
        description: ok
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      "4xx":
        description: error
    TestMultiMediaResponse:
      description: result tests different schemas for different media types
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
  requestBodies:
    PostRequestBody:
      description: post to add to the blog (from requestBodies)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostBody'
        application/xml:
          schema:
            $ref: '#/components/schemas/PostBody'
  headers:
    XTestHeader:
      description: test header in response
      schema:
        type: string
    XDateHeader:
      description: test header with a date format
      schema:
        type: string
        format: date
